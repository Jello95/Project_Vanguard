allocation <- fread(file = 'returns.csv')
allocation <- allocation %>%
filter(Year %in% c(1993:2019))
converter <- function(x){
x = gsub('%', '', x)
x = as.numeric(x)
x = x/100
return (x)
}
allocation <- allocation %>%
mutate(newstockval = converter(allocation$`US Stock Market`),
newbondval = converter(allocation$`Total US Bond Market`),
newEUROval = converter(allocation$`European Stocks`),
newASIAval = converter(allocation$`Pacific Stocks`),
newIGval = converter(allocation$`Long-Term Corporate Bonds`),
newHYval = converter(allocation$`High Yield Corporate Bonds`)
) %>%
select(Year, newstockval, newbondval, newEUROval, newASIAval,
newIGval, newHYval)
newalloc <- allocation %>%
summarise(ID = c('USstocks', 'USbonds',
'EUstocks', 'APstocks',
'IGbonds', 'HYbonds'),
ER = c(mean(newstockval), mean(newbondval),
mean(newEUROval), mean(newASIAval),
mean(newIGval), mean(newHYval)),
SD = c(sd(newstockval), sd(newbondval),
sd(newEUROval), sd(newASIAval),
sd(newIGval), sd(newHYval)))
standard <- function (w, corr, sd1, sd2){
a = (w * sd1)^2
b = ((1 - w)*sd2)^2
c = 2 * w * (1 - w) * sd1*sd2*corr
value = (a + b + c)^(1/2)
return (value)
}
expected <- function (w, er1, er2){
a = w * er1
b = (1 - w) * er2
return (a+b)
}
ibrary(shiny)
vid1 <- 'https://www.youtube.com/embed/_-Zqz75r9PQ'
fluidPage(
titlePanel(
'Efficient Frontier and Asset Allocation'
),
sidebarPanel(
selectizeInput(inputId = 'abc',
label = 'Index_1',
choices = c('US_Stocks', 'US_Bonds', 'Euro_Stocks',
'Asia_Stocks', 'IG_Bonds', 'HY_Bonds'),
selected = 'US_Stocks'),
selectizeInput(inputId = 'def',
label = 'Index_2',
choices = c('US_Stocks', 'US_Bonds', 'Euro_Stocks',
'Asia_Stocks', 'IG_Bonds', 'HY_Bonds'),
selected = 'US_Bonds'),
h3('Purpose'),
p('The goal is to determine the appropriate asset allocation in a hypothetical portfolio
made up of two risky assets. Using index returns provided by Vanguard over a thirty year
period, we can assess the relationship between expected return and standard deviation
for a range of asset classes within equities and fixed income.'),
h3('Background'),
p('In modern portfolio theory, the efficient frontier is an investment portfolio which
occupies the efficient parts of the risk-return spectrum. Formally, it is the set of
portfolios which satisfy the condition that no other portfolio exists with a higher
expected return but with the same standard deviation of return. The efficient frontier
was first formulated by Harry Markowitz in 1952.'),
),
mainPanel(
h3('Portfolio Optimization'),
plotOutput('frontier', width = '100%'),
plotOutput('bargraph', width = '100%'),
h3('The Basics of Investing'),
tags$iframe(src = vid1 , width = '560', height = '315')
)
)
runApp('Desktop/R Shiny Project Vanguard')
shiny::runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp()
runApp()
runApp()
runApp()
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
View(returns)
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
shiny::runApp('Desktop/Project_Vanguard')
shiny::runApp('Desktop/Project_Vanguard')
library(DT)
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp()
runApp('Desktop/Project_Vanguard')
runApp()
runApp('Desktop/Project_Vanguard')
View(generator)
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
type(funds)
print(funds)
print(as.dataframe(funds))
print(as.data.frame(funds))
runApp('Desktop/Project_Vanguard')
print(funds)
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
print(c('1', '2', '3'))
print(list)
print(newlist)
print('newlist')
print(c('1', '2', '3'))
newlist = c('1', '2', '3')
print(newlist)
print(oldlist)
oldlist <- list()
for (i in length(t)){
oldlist[i] = t[i]
}
print(oldlist)
for (i in length(t)){
oldlist[i] = t[i]
}
print(oldlist)
oldlist()
for (i in length(t)){
oldlist[i] = t[i]
}
print(oldlist)
t = c('1', '2', '3')
oldlist <- list()
for (i in length(t)){
oldlist[i] = t[i]
}
print(oldlist)
t = c('1', '2', '3')
t = list(t)
oldlist <- list()
for (i in length(t)){
oldlist[i] = t[i]
}
print(oldlist)
t = c('1', '2', '3')
t = list(t)
oldlist <- list()
oldlist <- t
print(oldlist)
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
t = c('1', '2', '3')
t = list(t)
upper <- function(num, value1, value2, value3, value4, value5){
p = 0
if (num == 1) {
p = value1
} else if (num == 2){
p = value2
} else if (num == 3){
p = value3
} else{
p = value4
}
return(p)
}
lapply(t, upper,
value1 = 0.0644,
value2 = 0.0164,
value3 = 0.0118,
value4 = 0,
value5 = 0)
t = c('1', '2', '3')
t = list(t)
upper <- function(num, value1, value2, value3, value4, value5){
p = list()
for (x in num) {
if (x == 1) {
p.append(value1)
} else if (x == 2){
p.append(value2)
} else if (x == 3){
p.append(value3)
} else{
p.append(value4)
}
}
return(p)
}
lapply(t, upper,
value1 = 0.0644,
value2 = 0.0164,
value3 = 0.0118,
value4 = 0,
value5 = 0)
t = c('1', '2', '3')
t = list(t)
upper <- function(num, value1, value2, value3, value4, value5){
p = list()
for (x in num) {
if (x == 1) {
p[x] = value1
} else if (x == 2){
p[x] = value2
} else if (x == 3){
p[x] = value3
} else{
p[x] = value4
}
}
return(p)
}
lapply(t, upper,
value1 = 0.0644,
value2 = 0.0164,
value3 = 0.0118,
value4 = 0,
value5 = 0)
p[[x]] = value2
t = c('1', '2', '3')
t = list(t)
upper <- function(num, value1, value2, value3, value4, value5){
p = list()
for (x in num) {
if (x == 1) {
p[[1]][x] = value1
} else if (x == 2){
p[[1]][x] = value2
} else if (x == 3){
p[[1]][x] = value3
} else{
p[[1]][x] = value4
}
}
return(p)
}
lapply(t, upper,
value1 = 0.0644,
value2 = 0.0164,
value3 = 0.0118,
value4 = 0,
value5 = 0)
t = c('1', '2', '3')
t = list(t)
upper <- function(num, value1, value2, value3, value4, value5){
p = list()
for (x in num) {
if (x == 1) {
p[x] = value1
} else if (x == 2){
p[x] = value2
} else if (x == 3){
p[x] = value3
} else{
p[x] = value4
}
}
return(p)
}
lapply(t, upper,
value1 = 0.0644,
value2 = 0.0164,
value3 = 0.0118,
value4 = 0,
value5 = 0)
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
upper <- function(num, value1, value2, value3, value4, value5){
p = list()
for (x in num) {
if (x == 1) {
p[x] = value1
} else if (x == 2){
p[x] = value2
} else if (x == 3){
p[x] = value3
} else{
p[x] = value4
}
}
return(p)
}
t = c('1', '2', '3')
t = list(t)
upper <- function(num, value1, value2, value3, value4, value5){
p = list()
for (x in num) {
if (x == 1) {
p[x] = value1
} else if (x == 2){
p[x] = value2
} else if (x == 3){
p[x] = value3
} else{
p[x] = value4
}
}
return(p)
}
lapply(t, upper,
value1 = 0.0644,
value2 = 0.0164,
value3 = 0.0118,
value4 = 0,
value5 = 0)
max(t[[1]])
max(x)
t = c('1', '2', '3')
t = list(t)
upper <- function(num, value1, value2, value3, value4, value5){
p = list()
for (x in num) {
if (x == 1) {
p[x] = value1
} else if (x == 2){
p[x] = value2
} else if (x == 3){
p[x] = value3
} else{
p[x] = value4
}
}
return(p)
}
x <- lapply(t, upper,
value1 = 0.0644,
value2 = 0.0164,
value3 = 0.0118,
value4 = 0,
value5 = 0)
max(x)
t = c('1', '2', '3')
t = list(t)
upper <- function(num, value1, value2, value3, value4, value5){
p = list()
for (x in num) {
if (x == 1) {
p[x] = value1
} else if (x == 2){
p[x] = value2
} else if (x == 3){
p[x] = value3
} else{
p[x] = value4
}
}
return(p)
}
x <- lapply(t, upper,
value1 = 0.0644,
value2 = 0.0164,
value3 = 0.0118,
value4 = 0,
value5 = 0)
max(x[[1]])
t = c('1', '2', '3')
t = list(t)
upper <- function(num, value1, value2, value3, value4, value5){
p = list()
for (x in num) {
if (x == 1) {
p[x] = value1
} else if (x == 2){
p[x] = value2
} else if (x == 3){
p[x] = value3
} else{
p[x] = value4
}
}
return(p)
}
x <- lapply(t, upper,
value1 = 0.0644,
value2 = 0.0164,
value3 = 0.0118,
value4 = 0,
value5 = 0)
max(x[[1]][[1]])
min(x[[1]][[1]])
x[[1]][[1]]
x[[1]]
t = c('1', '2', '3')
t = list(t)
upper <- function(num, value1, value2, value3, value4, value5){
p = list()
for (x in num) {
if (x == 1) {
p[x] = value1
} else if (x == 2){
p[x] = value2
} else if (x == 3){
p[x] = value3
} else{
p[x] = value4
}
}
return(p)
}
z <- lapply(t, upper,
value1 = 0.0644,
value2 = 0.0164,
value3 = 0.0118,
value4 = 0,
value5 = 0)
z[[1]]
t = c('1', '2', '3')
t = list(t)
upper <- function(num, value1, value2, value3, value4, value5){
p = list()
for (x in num) {
if (x == 1) {
p[x] = value1
} else if (x == 2){
p[x] = value2
} else if (x == 3){
p[x] = value3
} else{
p[x] = value4
}
}
return(p)
}
z <- lapply(t, upper,
value1 = 0.0644,
value2 = 0.0164,
value3 = 0.0118,
value4 = 0,
value5 = 0)
min(z[[1]])
min(unlist(z[[1]]))
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
summary(returns)
summary(returns %>% filter(fund_category = "Domestic Stock"))
summary(returns %>% filter(fund_category == "Domestic Stock"))
summary(returns %>% filter(fund_type == "Domestic Stock"))
summary(funds %>% filter(fund_type == "Domestic Stock"))
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
summary(funds %>% filter(fund_type == "Domestic Stock"))
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
summary(funds %>% filter(fund_type == "Domestic Stock"))
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
shiny::runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp()
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
runApp('Desktop/Project_Vanguard')
